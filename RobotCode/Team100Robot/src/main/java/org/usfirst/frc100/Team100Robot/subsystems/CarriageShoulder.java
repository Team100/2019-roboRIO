// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Team100Robot.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import org.usfirst.frc100.Team100Robot.Constants;
import org.usfirst.frc100.Team100Robot.commands.Shoulder.ShoulderDefault;
import org.usfirst.frc100.Team100Robot.commands.Shoulder.ShoulderTeleop;

/**
 *
 */
public class CarriageShoulder extends Subsystem {

    public int currentSetpointIndex = 0;
    public int currentSetpoint = -1;
    public static final int[] setpoints = {100,200,300};

    public WPI_TalonSRX carriageShoulderMotor;

    public CarriageShoulder() {
        carriageShoulderMotor = new WPI_TalonSRX(Constants.ELEVATOR_CARRIAGE_SHOULDER_CANID);
        carriageShoulderMotor.configFactoryDefault();
        carriageShoulderMotor.setSelectedSensorPosition(0);
        carriageShoulderMotor.configSelectedFeedbackSensor(FeedbackDevice.QuadEncoder, 0, Constants.SHOULDER_MASTER_TIMEOUT);
        carriageShoulderMotor.setInverted(true);
        carriageShoulderMotor.setSensorPhase(true);
        carriageShoulderMotor.configPeakOutputForward(Constants.SHOULDER_MAX_OUTPUT_FORWARD);
        carriageShoulderMotor.configPeakOutputReverse(Constants.SHOULDER_MAX_OUTPUT_REVERSE);
        carriageShoulderMotor.configNominalOutputForward(0);
        carriageShoulderMotor.configNominalOutputReverse(0);
        carriageShoulderMotor.configAllowableClosedloopError(0, 10, Constants.SHOULDER_MASTER_TIMEOUT);
        carriageShoulderMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0,10,Constants.SHOULDER_MASTER_TIMEOUT);
        carriageShoulderMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10,Constants.SHOULDER_MASTER_TIMEOUT);
        carriageShoulderMotor.configMotionCruiseVelocity(15000,Constants.SHOULDER_MASTER_TIMEOUT);
        carriageShoulderMotor.configMotionAcceleration(6000,Constants.SHOULDER_MASTER_TIMEOUT);
        
        carriageShoulderMotor.enableCurrentLimit(true);
        carriageShoulderMotor.configPeakCurrentLimit(Constants.SHOULDER_MAX_AMP);
        carriageShoulderMotor.overrideLimitSwitchesEnable(false);
        carriageShoulderMotor.config_kP(0, Constants.ELEVATOR_KP);
        carriageShoulderMotor.config_kI(0, Constants.ELEVATOR_KI);
        carriageShoulderMotor.config_kD(0, Constants.ELEVATOR_KD);
        carriageShoulderMotor.config_kF(0, Constants.ELEVATOR_KF);
    }

    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        /*currentSetpointIndex = 0;
        this.updateSetpointGivenIndex();*/
        //setDefaultCommand(new ShoulderDefault());

        setDefaultCommand(new ShoulderTeleop());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Shoulder Enc",this.carriageShoulderMotor.getSelectedSensorPosition());
        SmartDashboard.putNumber("Shoulder PO", this.carriageShoulderMotor.getMotorOutputPercent());
        SmartDashboard.putString("Shoulder CM", this.carriageShoulderMotor.getControlMode().toString());
        SmartDashboard.putNumber("Shoulder Setpoint",this.currentSetpoint);
        if(this.carriageShoulderMotor.getControlMode() == ControlMode.MotionMagic){
            SmartDashboard.putNumber("Shoulder Error", this.carriageShoulderMotor.getClosedLoopError());
        }
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void updateSetpointGivenIndex(){
        this.currentSetpoint = this.setpoints[this.currentSetpointIndex];
        //this.carriageShoulderMotor.set(ControlMode.MotionMagic,this.currentSetpoint);
    }
    public void moveUp(){
        if(this.currentSetpoint < this.setpoints.length - 1){
            this.currentSetpoint += 1;
        }
        this.updateSetpointGivenIndex();
    }
    public void moveDown(){
        if(this.currentSetpoint > 0){
            this.currentSetpoint -= 1;
        }
        this.updateSetpointGivenIndex();
    }
}

