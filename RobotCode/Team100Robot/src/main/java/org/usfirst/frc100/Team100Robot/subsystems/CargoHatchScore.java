// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Team100Robot.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import org.usfirst.frc100.Team100Robot.Constants;

import edu.wpi.first.wpilibj.Solenoid;

/**
 *
 */
public class CargoHatchScore extends Subsystem {

    private WPI_TalonSRX topBallRollerShooter;
    private WPI_TalonSRX bottomBallRollerShooter;
    private Solenoid loadingStationIntake;
    private Solenoid hatchScorer;
    private Solenoid cargoScorer;

    public CargoHatchScore() {
        topBallRollerShooter = new WPI_TalonSRX(Constants.CARGO_HATCH_SCORER_TOP_CANID);
        bottomBallRollerShooter = new WPI_TalonSRX(Constants.CARGO_HATCH_SCORER_BOTTOM_CANID);
        
        loadingStationIntake = new Solenoid(Constants.PCM_CANID, Constants.LOADING_STATION_INTAKE_PCMID);
        addChild("LoadingStationIntake", loadingStationIntake);
        
        hatchScorer = new Solenoid(Constants.PCM_CANID, Constants.HATCH_SCORER_PCMID);
        addChild("HatchScorer", hatchScorer);
        
        cargoScorer = new Solenoid(Constants.PCM_CANID, Constants.CARGO_SCORER_PCMID);
        addChild("CargoScorer", cargoScorer);
    }

    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void updateDashboard(){
        SmartDashboard.putString(Constants.SB_GROUP_PREFIX_SHOULDER + "CurrentCommand", getCurrentCommandName());
        SmartDashboard.putBoolean(Constants.SB_GROUP_PREFIX_SHOULDER + "Solenoids/Intake", loadingStationIntake.get());
        SmartDashboard.putBoolean(Constants.SB_GROUP_PREFIX_SHOULDER + "Solenoid/Hatch", hatchScorer.get());
        SmartDashboard.putBoolean(Constants.SB_GROUP_PREFIX_SHOULDER + "Solenoid/Cargo", cargoScorer.get());
        SmartDashboard.putNumber(Constants.SB_GROUP_PREFIX_SHOULDER + "Top Roller/Voltage", topBallRollerShooter.getBusVoltage());
        SmartDashboard.putNumber(Constants.SB_GROUP_PREFIX_SHOULDER + "Top Roller/Position", topBallRollerShooter.getSelectedSensorPosition());
        SmartDashboard.putNumber(Constants.SB_GROUP_PREFIX_SHOULDER + "Top Roller/Velocity", topBallRollerShooter.getSelectedSensorVelocity());
        SmartDashboard.putNumber(Constants.SB_GROUP_PREFIX_SHOULDER + "Bottom Roller/Voltage", bottomBallRollerShooter.getBusVoltage());
        SmartDashboard.putNumber(Constants.SB_GROUP_PREFIX_SHOULDER + "Bottom Roller/Position", bottomBallRollerShooter.getSelectedSensorPosition());
        SmartDashboard.putNumber(Constants.SB_GROUP_PREFIX_SHOULDER + "Bottom Roller/Velocity", bottomBallRollerShooter.getSelectedSensorVelocity());
    }

}

